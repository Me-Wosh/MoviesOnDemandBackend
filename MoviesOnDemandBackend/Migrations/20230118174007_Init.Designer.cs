// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviesOnDemandBackend.Entities;

#nullable disable

namespace MoviesOnDemandBackend.Migrations
{
    [DbContext(typeof(MoviesOnDemandDbContext))]
    [Migration("20230118174007_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieUser", b =>
                {
                    b.Property<int>("FavoriteMoviesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("FavoriteMoviesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("MovieUser");
                });

            modelBuilder.Entity("MoviesOnDemandBackend.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Genre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfRatings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(2, 1)
                        .HasColumnType("decimal(2,1)")
                        .HasDefaultValue(0m);

                    b.Property<int>("SumOfRatings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Year")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Movies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Genre = "Crime",
                            NumberOfRatings = 0,
                            Rating = 0m,
                            SumOfRatings = 0,
                            Title = "The Godfather",
                            Year = 1972
                        },
                        new
                        {
                            Id = 2,
                            Genre = "Action",
                            NumberOfRatings = 0,
                            Rating = 0m,
                            SumOfRatings = 0,
                            Title = "The Dark Knight",
                            Year = 2008
                        },
                        new
                        {
                            Id = 3,
                            Genre = "Crime",
                            NumberOfRatings = 0,
                            Rating = 0m,
                            SumOfRatings = 0,
                            Title = "Pulp Fiction",
                            Year = 1994
                        },
                        new
                        {
                            Id = 4,
                            Genre = "Drama",
                            NumberOfRatings = 0,
                            Rating = 0m,
                            SumOfRatings = 0,
                            Title = "Fight Club",
                            Year = 1999
                        },
                        new
                        {
                            Id = 5,
                            Genre = "Sci-Fi",
                            NumberOfRatings = 0,
                            Rating = 0m,
                            SumOfRatings = 0,
                            Title = "The Matrix",
                            Year = 1999
                        },
                        new
                        {
                            Id = 6,
                            Genre = "Comedy",
                            NumberOfRatings = 0,
                            Rating = 0m,
                            SumOfRatings = 0,
                            Title = "Life is Beautiful",
                            Year = 1997
                        },
                        new
                        {
                            Id = 7,
                            Genre = "Animation",
                            NumberOfRatings = 0,
                            Rating = 0m,
                            SumOfRatings = 0,
                            Title = "Spirited Away",
                            Year = 2001
                        },
                        new
                        {
                            Id = 8,
                            Genre = "Horror",
                            NumberOfRatings = 0,
                            Rating = 0m,
                            SumOfRatings = 0,
                            Title = "Psycho",
                            Year = 1960
                        },
                        new
                        {
                            Id = 9,
                            Genre = "Western",
                            NumberOfRatings = 0,
                            Rating = 0m,
                            SumOfRatings = 0,
                            Title = "Django Unchained",
                            Year = 2012
                        },
                        new
                        {
                            Id = 10,
                            Genre = "Action",
                            NumberOfRatings = 0,
                            Rating = 0m,
                            SumOfRatings = 0,
                            Title = "Top Gun: Maverick",
                            Year = 2022
                        });
                });

            modelBuilder.Entity("MoviesOnDemandBackend.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("user");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("MovieUser", b =>
                {
                    b.HasOne("MoviesOnDemandBackend.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("FavoriteMoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesOnDemandBackend.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
